Class Method:

class ShippingContainer:

	next_serial = 1337
	
	@classmethod
	def _get_next_serial(cls):		
		result = cls.next_serial
		cls.next_serial += 1
		return result

	def __init__(self, owner_code, contents):
		self.owner_code = owner_code
		self.contents = contents
		self.serial = ShippingContainer._get_next_serial()


@staticmethod:
- No access needed to either class or instance objects.
- Most likely an implementation detail of the class.
- May be able to be moved to become a module-scope function

@classmethod:
- Requires access to the class object to call other class method or the constructor

__________________________________
class ShippingContainer:

	next_serial = 1337
	
	@staticmethod
	def _make_bic_code(owner_code, serial):				#This work after import iso6346.py to workfolder
		return iso6346.create(owner_code=owner_code,
					serial=str(serial).zfill(6))

	@classmethod
	def _get_next_serial(cls):		
		result = cls.next_serial
		cls.next_serial += 1
		return result

	@classmethod
	def create_empty(cls,owner_code):
		return cls(owner_code, contents=None)

	@classmethod
	def create_with_items(cls, owner_code, items):
		return cls(owner_code, contents=list(items))

	def __init__(self, owner_code, contents):
#		self.owner_code = owner_code
		self.contents = contents
		self.bic = ShippingContainer._make_bic_code(
			owner_code=owner_code,
			serial=ShippingContainer._get_next_serial())