Decorators:
- modify or enhance function without changing their definition


@my_decorator
def my_function():
...

- Replace , enhence, or modify existing functions
- Does not change the original function definition
- Calling code does not need to change
- Decorator mechanism uses the modified function's original name

___________________________________________________


def vegetable():
	return ascii('blomkal')

def animal():
	return ascii('bjorn')

def mineral():
	return ascii('stal')



Decorator funtion: escape_unicode.py

def escape_unicode(f):		# argument f is the function to be decorated
	def wrap(*args, **kwargs):
		x = f(*args, **kwargs)
		return ascii(x)
	return wrap

_______

def northern_city():
	return 'Tromso'

_______
>>> from escape_unicode import northern_city
>>> northern_city()
Out[4]: 'Tromso'

=========================

def escape_unicode(f):		# argument f is the function to be decorated
	def wrap(*args, **kwargs):
		x = f(*args, **kwargs)
		return ascii(x)
	return wrap

_______

@escape_unicode
def northern_city():
	return 'Tromso'

_______

>>> from escape_unicode import northern_city
>>> northern_city()
Out[4]: "'Troms\\xf8'"


___________+++++++++++++++++++++++++++++++++++++++++++++++

Classes as decorators:

@MyDec
def func():
...
  |
  |
 \ /

class MyDec:
	def __init__(self, f):
...
	def __call__(self):		# must be callable
...

============
e.g.

call_count.py

class CallCount:
	def __init__(self, f):
		self.f = f
		self.count = 0

	def __call__(self, *args, **kwargs):
		self.count += 1
		return self.f(*args, **kwargs)

@CallCount
def hello(name):
	print('Hello, {}'.format(name))


_________________
>>> 
>>> from call_count import hello
>>> hello('Fred')
Hello, Fred
>>> hello('Wilma')
Hello, Wilma
>>> hello.count
Out[8]: 4
=========================++++++++++++++++++++++++++++++++++++++

Instances as decorators:


@AnotherDec()
def func():
...
  |
 \ /

class AnotherDec:
	def __call__(self, f):
		def wrap():
		...
		retur wrap

____________________________________

class Trace:
	def __init__(self):
		self.enabled = True
	
	def __call__(self, f):
		def wrap(*args, **kwargs):
			if self.enabled:
				print('Calling {}'.format(f))
			return f(*args, **kwargs)
		return wrap

tracer = Trace()

@tracer
def rotate_list(l)
	return l[1:] + [l[0]]

______________________________
>>> 
>>> from tracer import rotate_list, tracer
>>> l = [1,2,3]
>>> l = rotate_list(l)
calling <function rotate)list at 0x10...>
>>> l
Out[6]: [2,3,1]

>>> l = rotate_list(l)
calling <function rotate)list at 0x10...>
>>> l
Out[8]: [3,1,2]
>>> l = rortate_list(l)
calling <function rotate)list at 0x10...>
>>> l
Out[10]: [1,2,3]
>>> tracer.enabled = False		# Enable calling
>>> l = rotate_list(l)
>>> l
Out[..]: [2,3,1]
>>> l = rotate_list(l)
>>> l
Out[..]: [3,1,2]


##############################################################################


Multiple decorators:

@decorator1
@decorator2
@decorator3
def some_function():
	...


e.g.
______________________________

def escape_unicode(f):		
	def wrap(*args, **kwargs):
		x = f(*args, **kwargs)
		return ascii(x)
	return wrap

class Trace:
	def __init__(self):
		self.enabled = True
	
	def __call__(self, f):
		def wrap(*args, **kwargs):
			if self.enabled:
				print('Calling {}'.format(f))
			return f(*args, **kwargs)
		return wrap

tracer = Trace()


@tracer
@escape_unicode
def norwegian_island_maker(name):
	return name + 'oy'
________________________________

>>> from island_maker import norwegian_island_maker
>>> norwegian_island_maker('Llama')
Calling <function escape_unicode.<locals>.wrap at 0x...>
Out[4]: "'Llama\xf8y'"
